
//recerence:
//https://www.youtube.com/watch?v=exrH7tvt3f4
//https://github.com/stc/face-tracking-p5js
//https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection
//https://home.digipool.info/m/index.php/FaceTracking_with_clmtrackr_and_P5JS
//https://www.youtube.com/watch?v=Agpnp1G7zTM
let video;  
//livecapture
let livecapture = true;
let a =[];
let b;
let n1;
let n2;
let ln = [];
let num;
let d;
let count =0;
let l1;
let w;
let dia;
let c;
let ba=false
let ab= true

//face

 let model;  
let face;   
let v_face =  [[109,108,107,55,193,122,6,351,417,285,336,337,338],[174,236,134,220,237,241,141,94,370,461,457,440,363,456,399],[68,63,53,224,29,27,28,222,65,66,69],[104,105,52,223,27],[299,296,295,442,258,257,259,444,283,293,298],[333,334,282,443,257],[130,25,110,24,23,22,26,112,243],[190,56,28,27,29,30,247,130],[463,414,286,258,257,259,260,467,359],[359,255,339,254,253,252,256,341,463],[24,229,118,50,205,36,142,100,120,231,22],[252,451,349,371,266,425,280,347,449,254],[61,146,91,181,84,17,314,405,321,375,291]];
let in_v = [[109,108,107,55,193,122,6,351,417,285,336,337,338],[174,236,134,220,237,241,141,94,370,461,457,440,363,456,399],[68,63,53,224,29,27,28,222,65,66,69],[104,105,52,223,27],[299,296,295,442,258,257,259,444,283,293,298],[333,334,282,443,257],[130,25,110,24,23,22,26,112,243],[190,56,28,27,29,30,247,130],[463,414,286,258,257,259,260,467,359],[359,255,339,254,253,252,256,341,463],[24,229,118,50,205,36,142,100,120,231,22],[252,451,349,371,266,425,280,347,449,254],[61,146,91,181,84,17,314,405,321,375,291]];

let lastx;
let lasty;




let silhouette=[];

let Faceliving = true;[]


function setup() {
  
  createCanvas(640, 480);
  video = createCapture(VIDEO);
  loadFaceModel();
}

//face model
//reference:https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection
async function loadFaceModel() {
  model = await faceLandmarksDetection.load(
    faceLandmarksDetection.SupportedPackages.mediapipeFacemesh);
}

function draw() {
   
//when the video turn on, and faceliving prepared,get face
  if (video.loadedmetadata && model !== undefined) {
    getFace();
  }
  if(ba){
    background(random(0,255), random(0,255), random(0,255));
  }
if(ab){
background(random(0,255), random(0,255), random(0,255));
}

  
 //Faceliving 
  if (face !== undefined) {
   
    if (Faceliving) {
      console.log(face);
      Faceliving = false;
    }
    
    if(livecapture)
      { 
      l1 = scalePoint(face.boundingBox.topLeft);
      bottomRight = scalePoint(face.boundingBox.bottomRight);
      w = bottomRight.x - l1.x;
      dia = w / 5;
      
      noFill();
      noStroke();
      for(let j=0; j< v_face.length; j++){
      for(let i =0; i < v_face[j].length; i++){
        let ln = scalePoint(face.scaledMesh[v_face[j][i]]);
        lastx = ln.x;
        lasty = ln.y;
      }
      
      }
      //face silhouette
      fill( random(0,255), random(0,255), random(0,255) )
      stroke(random(0,255), random(0,255), random(0,255));
      beginShape();
      for (pt of face.annotations.silhouette) {
        pt = scalePoint(pt);
        vertex(pt.x, pt.y);
      }
      endShape(CLOSE);
     
      }
    //outer line 
      noFill();
      stroke(random(0,255), random(0,255), random(0,255));
      strokeWeight(2);
      for(let j=0; j< v_face.length; j++){
        beginShape();
        for(let i =0; i < v_face[j].length; i++){
          let ln = scalePoint(face.scaledMesh[v_face[j][i]]);
          curveVertex(ln.x,ln.y);
        }
        endShape();
      }
    
    //inner lines
      for(let j=0; j< in_v.length; j++){
        beginShape();
        for(let i =0; i < in_v[j].length; i++){
          let ln = scalePoint(face.scaledMesh[in_v[j][i]]);
          curveVertex(ln.x,ln.y);
        }
        endShape();  
      }
      }
    
}
//draw points on the face using all lines
function getline(){
  for(let g =0; g< a.length; g++){
    num = a[g];
    d = 5;
    for(let h=0; h<a[g].length-1;h++){
      for(let h=0; h<a[g].length-1;h++){
      n1 = num[h];
      n2 = num[h+1];
      b = new Circle(n1.x,n1.y,n2.x-n1.x,n2.y-n1.y);
      for(let i=0; i<3;i++){
  
        b.move();
        b.show();
      
      }
    }
    }
  }
  
  
}

//gets face points from video input
async function getFace() {
  const predictions = await model.estimateFaces({
    input: document.querySelector('video')
  }); 
  if (predictions.length === 0) {
    face = undefined;
  }
  else {
    face = predictions[0];
  }
}


//resume capturing
function continuecapture(){
  livecapture = false;
  video.play();
  pressed2 = true;
  video = createCapture(VIDEO);
  video.hide();
  loadFaceModel();
  
}

//Converting points in video coordinates to points on the canvas
function scalePoint(pt) {
  let x = map(pt[0], 0,video.width, 0,width);
  let y = map(pt[1], 0,video.height, 0,height);
  return createVector(x, y);
}




